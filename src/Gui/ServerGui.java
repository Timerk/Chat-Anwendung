/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Gui;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.net.ServerSocket;
import java.io.FileWriter;
import java.util.Iterator;

import javax.swing.DefaultListModel;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.ListSelectionModel;

import Backend.Server;
import Backend.UserAction;
import Backend.ClientHandler;
import Backend.RoomAction;
import Backend.ObservableHashMap.MapSizeChangeListener;
import Backend.RoomObject;

/**
 *
 * @author timbe
 */
public class ServerGui extends javax.swing.JFrame {

    private Server server;
    private DefaultListModel<RoomObject> roomListModel;
    private JPopupMenu roomPopUpMenu;
    private RoomObject roomObjectToChange;
    private String userToBann;
    private DefaultListModel<String>  userListModel;
    private BufferedReader bufferedFileReader;
    private JPopupMenu userPopUpMenu;
    private FileWriter fileWriter;
    private BufferedReader protocolReader;
    
    /**
     * Creates new form ServerGui
     * @throws IOException
    */
    public ServerGui(ServerSocket serverSocket) throws IOException {
        this.roomPopUpMenu = new JPopupMenu();
        this.userPopUpMenu = new JPopupMenu();
        this.roomListModel = new DefaultListModel<>();
        this.userListModel = new DefaultListModel<>();
        initComponents();
        loadUserData();
        this.server = new Server(serverSocket);
        //Implementation des MapSizeChangeListner zur Aktualisierung der Nutzerliste auf dem Server
        ClientHandler.getUserdata().setMapSizeChangeListener(new MapSizeChangeListener<String>() { 
            @Override
            public void onSizeChanged(String Key) {
                if(!userListModel.contains(Key)){
                    userListModel.addElement(Key);
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        serverLogPanel = new javax.swing.JPanel();
        chatScrollPane = new javax.swing.JScrollPane();
        chatTextArea = new javax.swing.JTextArea();
        statusPanel = new javax.swing.JPanel();
        statusTabbedPane = new javax.swing.JTabbedPane();
        userScrollPane = new javax.swing.JScrollPane();
        userList = new javax.swing.JList<>();
        roomScrollPane = new javax.swing.JScrollPane();
        roomList = new javax.swing.JList<>();
        createRoomButton = new javax.swing.JButton();
        deleteRoomButton = new javax.swing.JButton();
        editRoomButton = new javax.swing.JButton();
        informationPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        taskPanel = new javax.swing.JPanel();
        taskTextField = new javax.swing.JTextField();
        setNameComboBox = new javax.swing.JComboBox<>();
        acceptButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        updateTextArea = new javax.swing.JTextArea();
        serverMenuBar = new javax.swing.JMenuBar();
        serverMenu = new javax.swing.JMenu();
        userMenu = new javax.swing.JMenu();
        roomMenu = new javax.swing.JMenu();
        optionsMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ChatServer:\"Server\"");
        setBackground(new java.awt.Color(204, 204, 204));
        setResizable(false);
        setSize(new java.awt.Dimension(1200, 780));

        serverLogPanel.setBackground(new java.awt.Color(255, 255, 255));
        serverLogPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        serverLogPanel.setPreferredSize(new java.awt.Dimension(800, 390));

        chatTextArea.setEditable(false);
        chatTextArea.setColumns(20);
        chatTextArea.setRows(5);
        chatTextArea.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        chatScrollPane.setViewportView(chatTextArea);

        javax.swing.GroupLayout serverLogPanelLayout = new javax.swing.GroupLayout(serverLogPanel);
        serverLogPanel.setLayout(serverLogPanelLayout);
        serverLogPanelLayout.setHorizontalGroup(
            serverLogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(serverLogPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chatScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 786, Short.MAX_VALUE)
                .addContainerGap())
        );
        serverLogPanelLayout.setVerticalGroup(
            serverLogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(serverLogPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chatScrollPane)
                .addContainerGap())
        );

        statusPanel.setBackground(new java.awt.Color(255, 255, 255));
        statusPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        userList.addMouseListener(new java.awt.event.MouseAdapter () {
            public void mouseClicked(java.awt.event.MouseEvent evt){
                userListMouseClicked(evt);
            }
        });
        
        userList.setModel(userListModel);

        userList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        userScrollPane.setViewportView(userList);

        statusTabbedPane.addTab("Benutzer", userScrollPane);

        roomList.setModel(this.roomListModel);

        roomList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                roomListValueChanged(evt);
            }
        });

        roomList.addMouseListener(new java.awt.event.MouseAdapter () {
            public void mouseClicked(java.awt.event.MouseEvent evt){
                roomListMouseClicked(evt);
            }
        });

        roomList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        roomScrollPane.setViewportView(roomList);

        statusTabbedPane.addTab("Rooms", roomScrollPane);
        createRoomButton.setText("Raum erstellen");
        createRoomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createRoomButtonActionPerformed(evt);
            }
        });
        
        JMenuItem changeNameItem = new JMenuItem("Umbennen");
        changeNameItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt){
                changeNameItemActionPerformed(evt);
            }
        });
        roomPopUpMenu.add(changeNameItem);

        JMenuItem deleteItem = new JMenuItem("Löschen");
        deleteItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt){
                deleteItemItemActionPerformed(evt);
            }
        });
        roomPopUpMenu.add(deleteItem);

        JMenuItem warnUserItem = new JMenuItem("Verwarnen");
        warnUserItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt){
                warnUserItemActionPerformed(evt);
            }
        });
        userPopUpMenu.add(warnUserItem);
        userPopUpMenu.addSeparator();

        JMenuItem timeOutUserItem = new JMenuItem("Timeout");
        timeOutUserItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt){
                timeOutUserItemActionPerformed(evt);
            }
        });
        userPopUpMenu.add(timeOutUserItem);
        userPopUpMenu.addSeparator();

        JMenuItem bannUserItem = new JMenuItem("Ausschliessen");
        bannUserItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt){
                bannUserItemActionPerformed(evt);
            }
        });
        userPopUpMenu.add(bannUserItem);
        userPopUpMenu.addSeparator();

        JMenuItem removeBannItem = new JMenuItem("Bann zurückziehen ");
        removeBannItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt){
                removeBannItemaActionPerformed(evt);
            }
        });
        userPopUpMenu.add(removeBannItem);

        deleteRoomButton.setText("Raum löschen");

        editRoomButton.setText("Raum editieren");

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(statusTabbedPane)
                    .addGroup(statusPanelLayout.createSequentialGroup()
                        .addComponent(createRoomButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(editRoomButton, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(deleteRoomButton, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 378, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createRoomButton)
                    .addComponent(deleteRoomButton)
                    .addComponent(editRoomButton))
                .addGap(14, 14, 14))
        );

        informationPanel.setBackground(new java.awt.Color(255, 255, 255));
        informationPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setText("ID: 2");

        jLabel2.setText("Mitglieder: 7");

        jLabel3.setText("Name: Informatik Studenten");

        jLabel4.setText("Editierbar: ja");

        javax.swing.GroupLayout informationPanelLayout = new javax.swing.GroupLayout(informationPanel);
        informationPanel.setLayout(informationPanelLayout);
        informationPanelLayout.setHorizontalGroup(
            informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(informationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        informationPanelLayout.setVerticalGroup(
            informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(informationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE)
                .addGroup(informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4))
                .addContainerGap())
        );

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        updateTextArea.setColumns(20);
        updateTextArea.setRows(5);
        jScrollPane1.setViewportView(updateTextArea);

        javax.swing.GroupLayout taskPanelLayout = new javax.swing.GroupLayout(taskPanel);
        taskPanel.setLayout(taskPanelLayout);
        taskPanelLayout.setHorizontalGroup(
            taskPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(taskPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(taskPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(taskPanelLayout.createSequentialGroup()
                        .addComponent(taskTextField)
                        .addContainerGap())
                    .addGroup(taskPanelLayout.createSequentialGroup()
                        .addGroup(taskPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE)
                            .addComponent(setNameComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(acceptButton)
                        .addGap(33, 33, 33))))
        );
        taskPanelLayout.setVerticalGroup(
            taskPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(taskPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(taskTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(taskPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(setNameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(acceptButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                .addContainerGap())
        );

        serverMenu.setText("Server");
        serverMenuBar.add(serverMenu);

        userMenu.setText("Benutzer");
        serverMenuBar.add(userMenu);

        roomMenu.setText("Room");
        serverMenuBar.add(roomMenu);

        optionsMenu.setText("Optionen");
        serverMenuBar.add(optionsMenu);

        setJMenuBar(serverMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(serverLogPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(statusPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(informationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(taskPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(serverLogPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 745, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(statusPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(informationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(taskPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Erstellung eines neuen Raumes
    private synchronized void createRoomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createRoomButtonActionPerformed
        createRoom createRoomFrame = new createRoom();
        createRoomFrame.setVisible(true);
        //Warten auf Eingabe aus dem createRoomFrame
        new Thread ( () ->{
            while (createRoomFrame.getName() == null) {
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
            //Erstellung des Raumes mit dem eingegebenen Name
            if(createRoomFrame.getName() != null){
                RoomObject room_object = new RoomObject(createRoomFrame.getName());
                ClientHandler.roomObjects.add(room_object);
                if(ClientHandler.clientHandlers.size() > 0){
                    ClientHandler.clientHandlers.get(0).broadcastMessage(new RoomAction(room_object));  //Versendung des Raumes an alle Clients
                }
                roomListModel.addElement(room_object);
                createRoomFrame.dispose();
            }
        }).start();
    }//GEN-LAST:event_createRoomButtonActionPerformed


    private void roomListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_roomListValueChanged
        if(!evt.getValueIsAdjusting()){
            RoomObject room_object = roomList.getSelectedValue();
            roomList.clearSelection();
        }
    }//GEN-LAST:event_roomListValueChange

    private void roomListMouseClicked(java.awt.event.MouseEvent evt){
        if (javax.swing.SwingUtilities.isRightMouseButton(evt)) {
            int index = roomList.locationToIndex(evt.getPoint());
            if (index != -1) {
                this.roomObjectToChange = roomList.getModel().getElementAt(index);
                if (roomObjectToChange != null) {
                    roomPopUpMenu.setPreferredSize(new java.awt.Dimension (100,50));
                    roomPopUpMenu.show(roomList, evt.getX(), evt.getY());
                }
            }
        }
    }

    //Änderung eines Raumnames und Versendung an alle Clients
    private void changeNameItemActionPerformed(java.awt.event.ActionEvent evt){
        ChangeRoomName changeRoomName = new ChangeRoomName();
        changeRoomName.setVisible(true);
        //Warten auf Eingabe
        new Thread( () -> {
            while (changeRoomName.getName() == null) {
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
            //Änderung des Namen auf dem Server
            int index = roomListModel.indexOf(roomObjectToChange);
            roomListModel.get(index).setRoomName(changeRoomName.getName());
            roomListModel.setElementAt(roomListModel.get(index), index);
            //Nachricht mit Namesänderung an Clients 
            if(ClientHandler.clientHandlers.size() >0){
                RoomAction messageToClient = new RoomAction(new RoomObject(changeRoomName.getName()));
                messageToClient.setIndex(index);
                messageToClient.setNameChanged(true);
                ClientHandler.clientHandlers.get(0).broadcastMessage(messageToClient);
            }
            changeRoomName.dispose();
        }).start();
    }

    //Löschen eines Raumes
    private void deleteItemItemActionPerformed(java.awt.event.ActionEvent evt){
        int index = roomListModel.indexOf(roomObjectToChange);
        if(ClientHandler.clientHandlers.size() > 0){
            RoomAction messageToClients = new RoomAction(roomListModel.get(index));
            messageToClients.setIndex(index);
            messageToClients.setRemoved(true);
            ClientHandler.clientHandlers.get(0).broadcastMessage(messageToClients);
        }
        roomListModel.remove(index);
    }

    //Laden der Nutzer Daten aus der UserData Datein wird im Konstruktor auf gerufen 
    private void loadUserData(){
        try {
            File data = new File("src\\UserData\\UserData.txt");
            if(data.exists()){            
                this.bufferedFileReader = new BufferedReader(new FileReader(data));
                String line;
                while ((line = bufferedFileReader.readLine()) != null) {
                    String [] parts = line.split(":");
                    if(parts.length == 2){
                        String left = parts[0];
                        userListModel.addElement(left);
                    }
                }
            }
        }catch(IOException e){
            e.printStackTrace();
        }
    }

    private void userListMouseClicked(java.awt.event.MouseEvent evt){
        if(javax.swing.SwingUtilities.isRightMouseButton(evt)){
            int index = userList.locationToIndex(evt.getPoint());
            if(index != -1){
                this.userToBann = userList.getModel().getElementAt(index);                         //Speichern des ausgeählten Nutzer 
                if(userToBann != null){
                    userPopUpMenu.setPreferredSize(new java.awt.Dimension (130,100));
                    userPopUpMenu.show(userList, evt.getX(), evt.getY());
                }
            }
        }
    }

    //Permanentes Ausschliessen eines Nutzer
    private void bannUserItemActionPerformed(java.awt.event.ActionEvent evt){
        try {
            //Nutzername und Art des Ausschluss in BannList.txt speichern
            this.fileWriter = new FileWriter("src\\UserData\\BannList.txt", true);
            fileWriter.append(userToBann+":"+"perm"+"\n");
            fileWriter.close();
            //Ausschluss an Nutzer weiterleiten
            for (ClientHandler clientHandler : ClientHandler.clientHandlers) {
                if(clientHandler.getUserName().equals(userToBann)){
                    UserAction bannMessage = new UserAction(userToBann, true, true, false);
                    clientHandler.getOjectOutputStream().writeObject(bannMessage);
                }   
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    private void timeOutUserItemActionPerformed(java.awt.event.ActionEvent evt){
        SetTime setTimeFrame = new SetTime();
        setTimeFrame.setVisible(true);
        //Warten auf Eingabe der Dauer des timeouts
        new Thread(()->{
            try {
                while (setTimeFrame.getTime() == null) {
                    try {
                        Thread.sleep(100);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
                //Nutzername und Art des Ausschluss in BannList.txt speichern
                this.fileWriter = new FileWriter("src\\UserData\\BannList.txt", true);
                fileWriter.append(userToBann+":"+"temp"+"\n");
                fileWriter.close();
                //Ausschluss an Nutzer weiterleiten
                if(ClientHandler.clientHandlers.size() > 0){
                    synchronized(ClientHandler.clientHandlers){
                        Iterator<ClientHandler> iterator = ClientHandler.clientHandlers.iterator();
                        while (iterator.hasNext()) {
                            ClientHandler clientHandler = iterator.next();
                            if(clientHandler.getUserName().equals(userToBann)){
                                UserAction bannMessage = new UserAction(userToBann, true, false, true);
                                clientHandler.getOjectOutputStream().writeObject(bannMessage);
                                iterator.remove();
                            } 
                        }
                    }
                }
                int time = Integer.parseInt(setTimeFrame.getTime());
                server.waitForBannEnd(time, userToBann);                  //Methode startet einen Thread der bis zu Ablauf des timeouts wartet und löscht nach Ablauf den Eintrag aus BannList.txt
            } catch (Exception e) {
                e.printStackTrace();
            }
        }).start();
    }

    //Verwarnen eines Nutzers
    private void warnUserItemActionPerformed(java.awt.event.ActionEvent evt){
        createRoom warningFrame = new createRoom();
        warningFrame.setVisible(true);
        //Warten auf Eingabe einer Verwarnung
        new Thread(() ->{
            try {
                while (warningFrame.getName() == null) {
                    Thread.sleep(100);
                }
                //Senden der Verwarung an Nutzer
                if(ClientHandler.clientHandlers.size() > 0){
                    synchronized(ClientHandler.clientHandlers){
                        Iterator<ClientHandler> iterator = ClientHandler.clientHandlers.iterator();
                        while (iterator.hasNext()) {
                            ClientHandler clientHandler = iterator.next();
                            if(clientHandler.getUserName().equals(userToBann)){
                                UserAction bannMessage = new UserAction(userToBann, true, false, false);
                                bannMessage.setWarningMessage("SERVER: "+warningFrame.getName()+" !");
                                clientHandler.getOjectOutputStream().writeObject(bannMessage);
                                iterator.remove();
                            } 
                        }
                    }
                }
                warningFrame.dispose();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }).start();
    }

    private void removeBannItemaActionPerformed(java.awt.event.ActionEvent evt){
        server.removeBann(userToBann);
    }

    //Einlesen des Protokoll zur AKtualisierung des Serverlog alle 100ms
    public void checkProtocol(){
        new Thread(() ->{
            try {
                int currentIndex = 0;
                int pastIndex    = -1;
                this.protocolReader = new BufferedReader(new FileReader("src\\UserData\\Protocol.txt"));
                while (!server.getServerSocket().isClosed()) {
                    Thread.sleep(100);
                    String line;
                    while ((line = protocolReader.readLine()) != null) {
                        if(currentIndex > pastIndex){                     //Anhängen einer neue Zeile an das Serverlog
                            if (line != null) {
                                chatTextArea.append(line+"\n");
                                pastIndex++;
                            }
                        }else if(currentIndex == 0 && pastIndex == -1){     
                            if (line != null) {
                                chatTextArea.append(line+"\n");
                                pastIndex++;
                            }
                        }
                        currentIndex++;
                    }
                }
            } catch (IOException | InterruptedException e) {
                e.printStackTrace();
            } 
        }).start();
    }



    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ServerSocket serverSocket;
                try {
                    serverSocket = new ServerSocket(1234);
                    ServerGui serverGui = new ServerGui(serverSocket);
                    serverGui.setVisible(true);
                    serverGui.server.startServer();
                    serverGui.checkProtocol();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton acceptButton;
    private javax.swing.JScrollPane chatScrollPane;
    private javax.swing.JTextArea chatTextArea;
    private javax.swing.JButton createRoomButton;
    private javax.swing.JButton deleteRoomButton;
    private javax.swing.JButton editRoomButton;
    private javax.swing.JPanel informationPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenu optionsMenu;
    private javax.swing.JList<RoomObject> roomList;
    private javax.swing.JMenu roomMenu;
    private javax.swing.JScrollPane roomScrollPane;
    private javax.swing.JPanel serverLogPanel;
    private javax.swing.JMenu serverMenu;
    private javax.swing.JMenuBar serverMenuBar;
    private javax.swing.JComboBox<String> setNameComboBox;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JTabbedPane statusTabbedPane;
    private javax.swing.JPanel taskPanel;
    private javax.swing.JTextField taskTextField;
    private javax.swing.JTextArea updateTextArea;
    private javax.swing.JList<String> userList;
    private javax.swing.JMenu userMenu;
    private javax.swing.JScrollPane userScrollPane;
    // End of variables declaration//GEN-END:variables
}
