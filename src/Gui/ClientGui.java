/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Gui;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;

import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.ListSelectionModel;

import Backend.Client;
import Backend.FileMessage;
import Backend.LoginMessage;
import Backend.MessageListener;
import Backend.RoomAction;
import Backend.RoomObject;
import Backend.TextMessage;
import Backend.UserAction;

/**
 *
 * @author timbe
 */
public class ClientGui extends javax.swing.JFrame {

    private Client client;
    private Login loginFrame;
    private String [] loginData;
    private DefaultListModel<RoomObject>  roomListModel;
    private DefaultListModel<String>      userListModel;
    private ArrayList<RoomObject> rooms;
    private JPopupMenu userPopupMenu;
    private JPopupMenu roomPopupMenu;
    private String userFromList;
    private RoomObject room;
    private HashMap<String, ArrayList<FileMessage>> filesReceivedMap;  //Speicherung der empfangen Dateien mit dem zugehörigen Nutzer als Schlüssel 
    private String currentRoom;
    private ArrayList<String> joinedRooms;
    private HashMap<String, PrivateRoom>   privateRoomsMap;            //Speicherung der PrivateRoom Objekt mit zugehörigen Nutzer als Schlüssel
    private ColorListCellRenderer userCellRenderer;
    private ColorListCellRenderer roomCellRenderer;

    /**
     * Creates new form ClientGui
     */
    public ClientGui(Socket socket) {
        this.roomListModel = new DefaultListModel<>();
        this.userListModel = new DefaultListModel<>();
        this.userPopupMenu = new JPopupMenu();
        this.roomPopupMenu  = new JPopupMenu();
        this.filesReceivedMap = new HashMap<>();
        this.rooms = new ArrayList<>();
        this.joinedRooms = new ArrayList<>();
        this.privateRoomsMap = new HashMap<>();
        this.userCellRenderer = new ColorListCellRenderer();
        this.roomCellRenderer = new ColorListCellRenderer();
        initComponents();
        this.client = new Client(socket);
        this.loginFrame = new Login();
        loginFrame.Login.addActionListener(new ActionListener() {             // Zuweisung des Actionlistners im Loginframe
            @Override 
            public void actionPerformed(java.awt.event.ActionEvent evt){
                sendLoginData();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        statusPanel = new javax.swing.JPanel();
        statusLabel = new javax.swing.JLabel();
        chatPanel = new javax.swing.JPanel();
        chatScrollPane = new javax.swing.JScrollPane();
        chatTextArea = new javax.swing.JTextArea();
        messageTextField = new javax.swing.JTextField();
        sendMessageButton = new javax.swing.JButton();
        changeNickNamePanel = new javax.swing.JPanel();
        nickNameLabel = new javax.swing.JLabel();
        nickNameTextField = new javax.swing.JTextField();
        setNickNameButton = new javax.swing.JButton();
        roomPanel = new javax.swing.JPanel();
        roomListeTabs = new javax.swing.JTabbedPane();
        roomScrollPane = new javax.swing.JScrollPane();
        roomList = new javax.swing.JList<>();
        userListScrollPane = new javax.swing.JScrollPane();
        userList = new javax.swing.JList<>();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        statusPanel.setBackground(new java.awt.Color(255, 255, 255));
        statusPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Status"));

        statusLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusLabel)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                .addContainerGap())
        );

        chatPanel.setBackground(new java.awt.Color(255, 255, 255));
        chatPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Chat"));

        chatTextArea.setEditable(false);
        chatTextArea.setColumns(20);
        chatTextArea.setLineWrap(true);
        chatTextArea.setRows(5);
        chatScrollPane.setViewportView(chatTextArea);

        messageTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                messageTextFieldKeyPressed(evt);
            }
        });

        sendMessageButton.setText("senden");
        sendMessageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendMessageButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout chatPanelLayout = new javax.swing.GroupLayout(chatPanel);
        chatPanel.setLayout(chatPanelLayout);
        chatPanelLayout.setHorizontalGroup(
            chatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(chatPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(chatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chatScrollPane)
                    .addGroup(chatPanelLayout.createSequentialGroup()
                        .addComponent(messageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 720, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sendMessageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        chatPanelLayout.setVerticalGroup(
            chatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(chatPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chatScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(chatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(messageTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                    .addComponent(sendMessageButton))
                .addContainerGap())
        );

        changeNickNamePanel.setBackground(new java.awt.Color(255, 255, 255));
        changeNickNamePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Nickname"));

        nickNameLabel.setText("Nickname einstellen");

        setNickNameButton.setText("einstellen");

        javax.swing.GroupLayout changeNickNamePanelLayout = new javax.swing.GroupLayout(changeNickNamePanel);
        changeNickNamePanel.setLayout(changeNickNamePanelLayout);
        changeNickNamePanelLayout.setHorizontalGroup(
            changeNickNamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(changeNickNamePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(changeNickNamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(changeNickNamePanelLayout.createSequentialGroup()
                        .addComponent(nickNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(changeNickNamePanelLayout.createSequentialGroup()
                        .addComponent(nickNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                        .addComponent(setNickNameButton)
                        .addGap(22, 22, 22))))
        );
        changeNickNamePanelLayout.setVerticalGroup(
            changeNickNamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(changeNickNamePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nickNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(changeNickNamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(changeNickNamePanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(setNickNameButton, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, changeNickNamePanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(nickNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9)))
                .addContainerGap())
        );

        roomPanel.setBackground(new java.awt.Color(255, 255, 255));
        roomPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Rooms"));

        roomList.setModel(roomListModel);

        roomList.setCellRenderer(roomCellRenderer);

        roomList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                roomListValueChanged(evt);
            }
        });

        roomList.addMouseListener(new java.awt.event.MouseAdapter () {
            public void mouseClicked(java.awt.event.MouseEvent evt){
                roomListMouseClicked(evt);
            }
        });

        JMenuItem joinRoomItem = new JMenuItem("Raum beitreten");
        joinRoomItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                joinRoomItemActionPerformed(evt);
            }
        });
        roomPopupMenu.add(joinRoomItem);

        roomScrollPane.setViewportView(roomList);

        roomListeTabs.addTab("Room", roomScrollPane);

        userList.setModel(userListModel);

        userList.setCellRenderer(userCellRenderer);
        
        userList.addMouseListener(new java.awt.event.MouseAdapter () {
            public void mouseClicked(java.awt.event.MouseEvent evt){
                userListMouseClicked(evt);
            }
        });

        userList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                userListValueChanged(evt);
            }
        });
        userList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        userListScrollPane.setViewportView(userList);

        roomListeTabs.addTab("Benutzer", userListScrollPane);

        JMenuItem sendFileItem = new JMenuItem();
        sendFileItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                sendFileItemActionPerformed(evt);
            }
        });
        sendFileItem.setText("Datei senden");
        userPopupMenu.add(sendFileItem);
        userPopupMenu.addSeparator();

        JMenuItem receivedFilesItem = new JMenuItem("Dateien");
        receivedFilesItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                receivedFilesItemActionPerformed(evt);
            }
        });
        userPopupMenu.add(receivedFilesItem);
        userPopupMenu.addSeparator();

        javax.swing.GroupLayout roomPanelLayout = new javax.swing.GroupLayout(roomPanel);
        roomPanel.setLayout(roomPanelLayout);
        roomPanelLayout.setHorizontalGroup(
            roomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, roomPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(roomListeTabs, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
                .addContainerGap())
        );
        roomPanelLayout.setVerticalGroup(
            roomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roomPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(roomListeTabs)
                .addContainerGap())
        );

        jMenu1.setText("Menu");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Benutzer");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Room");
        jMenuBar1.add(jMenu3);

        jMenu4.setText("Optionen");
        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chatPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(statusPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(changeNickNamePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(roomPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(22, 22, 22))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(statusPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(changeNickNamePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(chatPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(roomPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    

    private void processMessage(){                                              // Verarbeitung von eigehenden Nachrichten welche über das Clientobjekt emfangen wurden
            this.client.listenForMessage(new MessageListener() {
            @Override
            public void MessageReceived(Object messageFromChat){            
                if (messageFromChat instanceof LoginMessage){
                    LoginMessage loginMessage = (LoginMessage) messageFromChat;
                    processLogin(loginMessage);
                }
                else if (messageFromChat instanceof UserAction){
                    UserAction userAction = (UserAction) messageFromChat;
                    processUserAction(userAction);
                } 
                else if (messageFromChat instanceof RoomAction) {
                    RoomAction roomAction = (RoomAction) messageFromChat;
                    processRoomAction(roomAction);
                }
                else if (messageFromChat instanceof TextMessage){
                    TextMessage textMessage = (TextMessage) messageFromChat;
                    processTextMessage(textMessage);
                }
                else if (messageFromChat instanceof FileMessage) {
                    FileMessage fileMessage = (FileMessage) messageFromChat;
                    processFile(fileMessage);
                }
            }
        });
    }

    private void sendMessageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendMessageButtonActionPerformed
        TextMessage messageToSend = new TextMessage(messageTextField.getText());
        messageToSend.setRoom(currentRoom);
        this.client.sendMessage(messageToSend);
        chatTextArea.append(messageToSend.getMessageToSend()+"\n");
        messageTextField.setText("");
    }//GEN-LAST:event_sendMessageButtonActionPerformed

    private void messageTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_messageTextFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            TextMessage messageToSend = new TextMessage(messageTextField.getText());
            messageToSend.setRoom(currentRoom);
            this.client.sendMessage(messageToSend);
            chatTextArea.append(messageToSend.getMessageToSend()+"\n");
            messageTextField.setText("");
        }
    }//GEN-LAST:event_messageTextFieldKeyPressed

    private void roomListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_roomListValueChanged
        if(!evt.getValueIsAdjusting()){
            RoomObject room_object = roomList.getSelectedValue();                                                                      //abspeichern des angeklickten Raumes aus der Liste
            if(room_object != null && room_object.getUserList().contains(client.getUserName())){                                       //Überprüfung ob Nutzer dem Raum breits begetreten ist
                if(room_object != null){
                    this.currentRoom = room_object.getRoomName();
                    chatTextArea.setText("");
                    statusLabel.setText("Status :       angemeldet als ["+client.getUserName()+"] im Raum ["+this.currentRoom+"].");   
                    roomCellRenderer.resetItemColor(roomListModel.indexOf(room_object));                                               //zurücksetzen der Schriftfarbe    
                    roomList.repaint();
                    for (RoomObject room : rooms) {
                        if(room.equals(room_object)){
                            for (String message : room.getMessageList()) {                                                             //Laden der Nachrichten welche an den Raum verschickten wurden  
                                chatTextArea.append(message+"\n");
                            }
                        }
                    }
                }
            }else if(room_object != null){
                JOptionPane.showMessageDialog(this, "Sind müssen diesem Raum erst betreten", "Raum", JOptionPane.PLAIN_MESSAGE);
            }
            roomList.clearSelection();
        }
    }//GEN-LAST:event_roomListValueChanged

    private void userListValueChanged(javax.swing.event.ListSelectionEvent evt){
        if(!evt.getValueIsAdjusting()){
            String user = userList.getSelectedValue();
            if(user != null){
                privateRoomsMap.get(user).setVisible(true);
                userCellRenderer.resetItemColor(userListModel.indexOf(user));
                userList.repaint();
            }
            userList.clearSelection();
        }
    }

    private void userListMouseClicked(java.awt.event.MouseEvent evt){ 
        if(javax.swing.SwingUtilities.isRightMouseButton(evt)){
            int index = userList.locationToIndex(evt.getPoint());
            if(index != -1){
                this.userFromList = userList.getModel().getElementAt(index);
                if(userFromList != null){
                    userPopupMenu.setPreferredSize(new java.awt.Dimension (100,75));
                    userPopupMenu.show(userList, evt.getX(), evt.getY());
                }
            }
        }
    }
    
    private void roomListMouseClicked(java.awt.event.MouseEvent evt){ 
        if(javax.swing.SwingUtilities.isRightMouseButton(evt)){
            int index = roomList.locationToIndex(evt.getPoint());
            if(index != -1){
                this.room = roomList.getModel().getElementAt(index);
                if(room != null){
                    roomPopupMenu.setPreferredSize(new java.awt.Dimension (100,50));
                    roomPopupMenu.show(roomList, evt.getX(), evt.getY());
                }
            }
        }
    }

    //Auswahl und Versendung einer Datein
    private void sendFileItemActionPerformed(ActionEvent evt){                     
        JFileChooser fileChooser = new JFileChooser();
            int returnValue = fileChooser.showOpenDialog(null);
            if (returnValue == JFileChooser.APPROVE_OPTION) {
                try {
                    FileInputStream fileInputStream = new FileInputStream(fileChooser.getSelectedFile());           
                    byte [] fileData = new byte[(int)fileChooser.getSelectedFile().length()];                //initialisierung eines Byte Arrays mit Länge der Datei
                    fileInputStream.read(fileData);                                                          //schreiben des Dateidaten in das Array
                    fileInputStream.close();

                    FileMessage fileToSend = new FileMessage(fileChooser.getSelectedFile().getName(), this.userFromList, fileData, client.getUserName());
                    client.sendMessage(fileToSend);                                                          //Versenden der Datei
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
    }

    //öffnen des Filereceiverframes zum abspeichern der Datein falls bereits Dateinen emfangen wurden
    private void receivedFilesItemActionPerformed(ActionEvent evt){
        if (filesReceivedMap.get(userFromList) != null ) {
            FileReceiver fileReceiver = new FileReceiver(filesReceivedMap.get(userFromList));
            fileReceiver.setVisible(true);
        }else{
            JOptionPane.showMessageDialog(this, "Dieser Nutzer hat ihnen noch keine Dateien gesendet", "Dateien", JOptionPane.PLAIN_MESSAGE);
        }
    }

    //versenden einer Beitrittsanfrage an den Server
    private void joinRoomItemActionPerformed(ActionEvent evt){
        if(room != null){
            if (!room.getUserList().contains(client.getUserName())) {
                RoomAction joinRequest = new RoomAction(room.getRoomName());
                joinRequest.setRoomRequest(true);
                client.sendMessage(joinRequest);
            }else{
                JOptionPane.showMessageDialog(this, "Sie sind diesem Raum bereits beigetreten", "Raum", JOptionPane.PLAIN_MESSAGE);
            }

        }else{
            JOptionPane.showMessageDialog(this, "Der Raum existiert nicht", "Raum", JOptionPane.PLAIN_MESSAGE);
        }
    }
    
    //Erstellung eines Privaten Raumes und hinzufügen eines Actionlistners um Nachrichten aus diese Raum zu verschicken 
    private PrivateRoom createPrivateRoom(String withUser){
        PrivateRoom privateRoom = new PrivateRoom();
        privateRoom.setStatusLabel(withUser);
        privateRoom.sendMessageButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                TextMessage textMessage = new TextMessage(privateRoom.getText(), withUser, client.getUserName());
                privateRoom.appendText(textMessage.getMessageToSend());
                privateRoom.clearTextField();
                client.sendMessage(textMessage);
            }
        });
        return privateRoom;
    }
    
    private void processTextMessage(TextMessage textMessage){
        if(!textMessage.isPrivateMessage()){
            messageToRoom(textMessage);
        }else{
            privateMessage(textMessage);
        }
    }

    //Verarbeitung von Nachrichten an Räume
    private void messageToRoom(TextMessage messageFromChat){
        for (RoomObject room : rooms) {
            if(room.getRoomName().equals(messageFromChat.getRoom())){
                room.getMessageList().add(messageFromChat.getMessageToSend());
                if(room.getRoomName().equals(currentRoom)){                           //Darstellung der Nachricht falls sie an den aktuellen Raum versendet wurde
                    chatTextArea.append(messageFromChat.getMessageToSend()+"\n");
                }else{
                    roomCellRenderer.setItemColor(roomListModel.indexOf(room), Color.GREEN); //Veränderung der Schriftfarbe falls nachricht nicht an aktuellen Raum verschickt wurde 
                    roomList.repaint();
                }
            }
        }
    }

    //Verarbeitung einer priavten Nachricht
    private void privateMessage(TextMessage textMessage){
        if(privateRoomsMap.containsKey(textMessage.getFromUser())){
            privateRoomsMap.get(textMessage.getFromUser()).appendText(textMessage.getMessageToSend());
            if (!privateRoomsMap.get(textMessage.getFromUser()).isVisible()) {
                userCellRenderer.setItemColor(userListModel.indexOf(textMessage.getFromUser()), Color.GREEN);
            }
            userList.repaint();
        }else{                                                                                                 //Erstellung eines PrivateRoom falls noch keiner vorhanden war
            PrivateRoom privateRoom = createPrivateRoom(textMessage.getFromUser());
            privateRoom.appendText(textMessage.getMessageToSend());
            privateRoomsMap.put(textMessage.getFromUser(), privateRoom);
            if (!privateRoom.isVisible()) {
                userCellRenderer.setItemColor(userListModel.indexOf(textMessage.getFromUser()), Color.GREEN);
            }
            userList.repaint();
        }
    }

    private void sendLoginData(){
       LoginMessage loginData = new LoginMessage(loginFrame.loginUserName.getText(), new String(loginFrame.loginPasswordField.getPassword()));
       this.loginData = new String[] {loginFrame.loginUserName.getText(), new String(loginFrame.loginPasswordField.getPassword())};
       client.sendMessage(loginData);
    }

    private void processLogin(LoginMessage loginMessage){
        if(loginMessage.vaildLogin()){
            loginFrame.valid = true;
        }else{
            JOptionPane.showMessageDialog(loginFrame, "Benutzername ist breits vergeben und Passwort falsch", "login", JOptionPane.PLAIN_MESSAGE);
        }
    }

    private void processRoomAction(RoomAction roomAction){
        if(roomAction.isRoomResponse()){
            processRoomResponse(roomAction);
        }else if(roomAction.UserAdded()){
            processUserJoined(roomAction);
        }else{
            processRoomRequest(roomAction);
        }
    }

    //Verarbeitung der Beitrittsantwort 
    private void processRoomResponse(RoomAction roomAction){
        if(roomAction.joinApproved()){
            joinedRooms.add(roomAction.getRoomName());
            for (RoomObject room : rooms) {
                if(room.getRoomName().equals(roomAction.getRoomName())){
                    int index = roomListModel.indexOf(room);
                    roomListModel.get(index).addUser(client.getUserName());
                    roomListModel.setElementAt(roomListModel.get(index), index);
                }
            }
        }else{
            JOptionPane.showMessageDialog(this, "Beitritt abgelehnt !","Serverantwort", JOptionPane.PLAIN_MESSAGE);
        }
    }

    //Verarbeitung von Raumerstellung, Namesänderung oder hizufügen eines neuen Raumes 
    private void processRoomRequest(RoomAction roomAction){
        if (roomAction.isRemoved()) {                                     
            roomListModel.remove(roomAction.getIndex());
            JOptionPane.showMessageDialog(this, "Der Raum in dem sie sich befinden wurde vom Server entfernt", "Raum", JOptionPane.PLAIN_MESSAGE);
            statusLabel.setText("");
        }else if (roomAction.NameChanged()) {
            roomListModel.get(roomAction.getIndex()).setRoomName(roomAction.getRoomToSend().getRoomName());;
            roomListModel.setElementAt(roomListModel.get(roomAction.getIndex()), roomAction.getIndex());
            JOptionPane.showMessageDialog(this, "Name des Raumes wurde in: "+roomAction.getRoomToSend().getRoomName()+" geändert", "Raum", JOptionPane.PLAIN_MESSAGE);
            statusLabel.setText("Status :       angemeldet als ["+client.getUserName()+"] im Raum ["+roomAction.getRoomToSend().getRoomName()+"].");
        }else{
            roomListModel.addElement(roomAction.getRoomToSend());
            rooms.add(roomAction.getRoomToSend());
        }
    }

    private void processUserAction(UserAction userAction){
        if(userAction.bannRequest()){
            processBannRequest(userAction);
        }else{
            processUserRequest(userAction);
        }
    }

    //Verarbeitung von Nutzerbeitritt oder Verlassen des Servers
    private void processUserRequest(UserAction userRequest){
        if(userRequest.userAdded()){
            userListModel.addElement(userRequest.getUserToSend());
            privateRoomsMap.put(userRequest.getUserToSend(), createPrivateRoom(userRequest.getUserToSend()));
        }else{
            userListModel.removeElement(userRequest.getUserToSend());
            if(privateRoomsMap.containsKey(userRequest.getUserToSend())){
                privateRoomsMap.get(userRequest.getUserToSend()).appendText("SERVER: Der Nutzer "+userRequest.getUserToSend()+" hat den Server verlassen.");
                privateRoomsMap.remove(userRequest.getUserToSend());
            }
        }
    }

    private void processBannRequest(UserAction bannRequest){
        if(bannRequest.isPerm()){
            JOptionPane.showMessageDialog(loginFrame, "Sie sind permanent vom Server ausgeschlossen !", "login", JOptionPane.PLAIN_MESSAGE);
            loginFrame.dispose();
            this.dispose();
            System.exit(0);
        }else if(bannRequest.isTemp()){
            JOptionPane.showMessageDialog(loginFrame, "Sie sind temporär vom Server ausgeschlossen!", "login", JOptionPane.PLAIN_MESSAGE);
            loginFrame.dispose();
            this.dispose();
            System.exit(0);
        }else{
            JOptionPane.showMessageDialog(this, bannRequest.getWarningMessage(), "Vewarnung", JOptionPane.PLAIN_MESSAGE);  
        }
    }

    private void processFile(FileMessage fileMessage){
        JOptionPane.showMessageDialog(this, "Sie haben eine Datei von "+fileMessage.getFromUser()+" empfangen","Datei empfangen", JOptionPane.PLAIN_MESSAGE);
        if (!filesReceivedMap.containsKey(fileMessage.getFromUser())) {
            filesReceivedMap.put(fileMessage.getFromUser(), new ArrayList<FileMessage>());
            filesReceivedMap.get(fileMessage.getFromUser()).add(fileMessage);
        }else{
            filesReceivedMap.get(fileMessage.getFromUser()).add(fileMessage);
        }
    }

    private void processUserJoined(RoomAction roomAction){
        int index = 0;
        for (RoomObject roomObject : rooms) {
            if(roomObject.getRoomName().equals(roomAction.getRoomName())){
                roomListModel.get(index).addUser(roomAction.getUserJoined());
                roomListModel.setElementAt(roomListModel.get(index), index);
            }
            index++;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Socket socket;
                try {
                    socket = new Socket("localhost", 1234);
                    ClientGui clientGui = new ClientGui(socket);
                    clientGui.loginFrame.setVisible(true);
                    clientGui.processMessage();
                    //Warten auf login Antwort des Servers 
                    new Thread( () -> {
                        while (!clientGui.loginFrame.valid) {
                            try {
                                Thread.sleep(1000);
                            } catch (InterruptedException e) {
                                e.printStackTrace();
                            }
                        }
                        clientGui.loginFrame.dispose();
                        JOptionPane.showMessageDialog(clientGui,"Sie wurden erfolgreich ein angemeldet.","login",JOptionPane.PLAIN_MESSAGE);
                        clientGui.client.setUserData(clientGui.loginData[0], clientGui.loginData[1]);
                        clientGui.currentRoom = "default";
                        clientGui.joinedRooms.add(clientGui.currentRoom);
                        clientGui.setTitle(clientGui.client.getUserName());
                        clientGui.setVisible(true); 
                    }).start();

                } catch (IOException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel changeNickNamePanel;
    private javax.swing.JPanel chatPanel;
    private javax.swing.JScrollPane chatScrollPane;
    private javax.swing.JTextArea chatTextArea;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JList<String> userList;
    private javax.swing.JScrollPane userListScrollPane;
    private javax.swing.JTextField messageTextField;
    private javax.swing.JLabel nickNameLabel;
    private javax.swing.JTextField nickNameTextField;
    private javax.swing.JList<RoomObject> roomList;
    private javax.swing.JTabbedPane roomListeTabs;
    private javax.swing.JPanel roomPanel;
    private javax.swing.JScrollPane roomScrollPane;
    private javax.swing.JButton sendMessageButton;
    private javax.swing.JButton setNickNameButton;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JPanel statusPanel;
    // End of variables declaration//GEN-END:variables
}
